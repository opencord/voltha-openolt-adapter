{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "db70f22d_f1a01aea",
        "filename": "internal/pkg/core/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1818,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2025-07-30T13:55:20Z",
      "side": 1,
      "message": "I could not understand why this boolean flag is needed. CheckOnuDevExistenceAtOnuDiscovery is already for this purpose? The same purpose could still be achived by using the CheckOnuDevExistenceAtOnuDiscovery flag.",
      "revId": "8ba4aa607544febf159d28112077f8120a8963a0",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "787d7843_48e976e4",
        "filename": "internal/pkg/core/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1818,
      "author": {
        "id": 1000960
      },
      "writtenOn": "2025-07-30T14:08:56Z",
      "side": 1,
      "message": "CheckOnuDevExistenceAtOnuDiscovery flag is used to check if the TP instance exists for the ONU device. If the TP inst exists in olt-adapter, we do not further process the discovery indication. If this flag is disabled, we will check if the ONU device exists in rw-core. If the device exists in rw-core, the olt-adapter will skip processing the discovery indication.\n\nFor the onu-reboot enhancement, we want the ONU discovery indication to be processed irrespective of whether the TP inst exists in the adapter or the device exists in rw-core. Hence the new flag will force the olt-adapter to proceed with processing the ONU discovery indication.",
      "parentUuid": "db70f22d_f1a01aea",
      "revId": "8ba4aa607544febf159d28112077f8120a8963a0",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5b29724_30d23bef",
        "filename": "internal/pkg/core/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1818,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2025-07-30T21:07:15Z",
      "side": 1,
      "message": "The flag CheckOnuDevExistenceAtOnuDiscovery seems to be an inverted control for checkForResourceExistance\u0027s core logic. If CheckOnuDevExistenceAtOnuDiscovery is true, it effectively disables the \"check for resource existence\" behavior.\nThe simplest and most logical refactoring is to remove CheckOnuDevExistenceAtOnuDiscovery and rely only on ForceOnuDiscIndProcessing to decide whether to perform the checkForResourceExistance logic at all.\nIt seems that also the comment above the CheckOnuDevExistenceAtOnuDiscovery is wrong:\n\n// CheckOnuDevExistenceAtOnuDiscovery if true , a check will be made for the existence of the onu device. If the onu device still exists , the onu discovery will be ignored, else a check for active techprofiles for ONU is checked.\nif !dh.openOLT.CheckOnuDevExistenceAtOnuDiscovery {\n // checks the resource existence here.. but the flag is inverted!",
      "parentUuid": "787d7843_48e976e4",
      "revId": "8ba4aa607544febf159d28112077f8120a8963a0",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd47b614_79971609",
        "filename": "internal/pkg/core/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1818,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2025-07-31T08:01:33Z",
      "side": 1,
      "message": "We have 3 cases to handle now \n case 1: check for tpinstance , which should be default behavior. before proceeding with onu discovery check for tpinstance\n case 2: check for device , this we need to check if the device is existing in core before accepting discovery. if there is no device then it is obvious that all tps and flows also will be deleted.\n case 3: dont check anything , this is needed for our reboot optimization \n \n inorder to handle all 3 scenrios we would need 2 flags, agree it is 1 extar flag to handle similar scenarios but easy way instead of complicating the logic\n if CheckOnuDevExistenceAtOnuDiscovery is set to true then case 2 will be checked , if it is set to false then case 1 will be checked by default.\n if ForceOnuDiscIndProcessing is set to true then CheckOnuDevExistenceAtOnuDiscovery will be ignored .\n if both CheckOnuDevExistenceAtOnuDiscovery and CheckOnuDevExistenceAtOnuDiscovery are false then it will be case 1 , TP check only by default.\n \n I think we will put better documentation in helmcharts and in adapter config file to be clear \n\nPlease share if you have other ideas",
      "parentUuid": "f5b29724_30d23bef",
      "revId": "8ba4aa607544febf159d28112077f8120a8963a0",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "badd0602_d4752aa9",
        "filename": "internal/pkg/core/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1818,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2025-07-31T08:14:34Z",
      "side": 1,
      "message": "\u003e We have 3 cases to handle now \n\u003e  case 1: check for tpinstance , which should be default behavior. before proceeding with onu discovery check for tpinstance\n\u003e  case 2: check for device , this we need to check if the device is existing in core before accepting discovery. if there is no device then it is obvious that all tps and flows also will be deleted.\n\u003e  case 3: dont check anything , this is needed for our reboot optimization \n\u003e  \n\u003e  inorder to handle all 3 scenrios we would need 2 flags, agree it is 1 extar flag to handle similar scenarios but easy way instead of complicating the logic\n\u003e  if CheckOnuDevExistenceAtOnuDiscovery is set to true then case 2 will be checked , if it is set to false then case 1 will be checked by default.\n\u003e  if ForceOnuDiscIndProcessing is set to true then CheckOnuDevExistenceAtOnuDiscovery will be ignored .\n\u003e  if both CheckOnuDevExistenceAtOnuDiscovery and ForceOnuDiscIndProcessing are false then it will be case 1 , TP check only by default.\n\u003e  \n\u003e  I think we will put better documentation in helmcharts and in adapter config file to be clear \n\u003e \n\u003e Please share if you have other ideas",
      "parentUuid": "dd47b614_79971609",
      "revId": "8ba4aa607544febf159d28112077f8120a8963a0",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47b81b52_caa0d50a",
        "filename": "internal/pkg/core/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1818,
      "author": {
        "id": 1000404
      },
      "writtenOn": "2025-07-31T12:57:26Z",
      "side": 1,
      "message": "It seems to me that your explanation and checkForResourceExistance function doesn\u0027t follow the intended behaviour!\n\nCase 2: !dh.openOLT.CheckOnuDevExistenceAtOnuDiscovery should be inverted to dh.openOLT.CheckOnuDevExistenceAtOnuDiscovery.\nCase 1: checking tpInstance still tied to CheckOnuDevExistenceAtOnuDiscovery so case 1 and case 2 are controlled by a single flag.\nCase 3: Don\u0027t check anything condition still be applied by setting the CheckOnuDevExistenceAtOnuDiscovery. Maybe I\u0027m confused here.\n\nI donwloaded the entire patch and here I what I see for the checkForResourceExistance function.\n\nfunc (dh *DeviceHandler) checkForResourceExistance(ctx context.Context, onuDiscInd *oop.OnuDiscIndication, sn string) (bool, error) {\n\tchannelID :\u003d onuDiscInd.GetIntfId()\n\tparentPortNo :\u003d plt.IntfIDToPortNo(onuDiscInd.GetIntfId(), voltha.Port_PON_OLT)\n\ttpInstExists :\u003d false\n\n\t// CheckOnuDevExistenceAtOnuDiscovery if true , a check will be made for the existence of the onu device. If the onu device\n\t// still exists , the onu discovery will be ignored, else a check for active techprofiles for ONU is checked.\n\tif !dh.openOLT.CheckOnuDevExistenceAtOnuDiscovery {\n\t\tonuDev :\u003d dh.getChildDevice(ctx, sn, parentPortNo)\n\t\tif onuDev !\u003d nil {\n\t\t\tvar onuGemInfo *rsrcMgr.OnuGemInfo\n\t\t\tvar err error\n\t\t\tif onuGemInfo, err \u003d dh.resourceMgr[channelID].GetOnuGemInfo(ctx, onuDev.onuID); err !\u003d nil {\n\t\t\t\tlogger.Warnw(ctx, \"Unable to find onuGemInfo\", log.Fields{\"onuID\": onuDev.onuID})\n\t\t\t\treturn false, err\n\t\t\t}\n\t\t\tif onuGemInfo !\u003d nil {\n\t\t\t\tfor _, uni :\u003d range onuGemInfo.UniPorts {\n\t\t\t\t\tuniID :\u003d plt.UniIDFromPortNum(uni)\n\t\t\t\t\ttpIDs :\u003d dh.resourceMgr[channelID].GetTechProfileIDForOnu(ctx, onuDev.onuID, uniID)\n\t\t\t\t\tif len(tpIDs) !\u003d 0 {\n\t\t\t\t\t\tlogger.Warnw(ctx, \"Techprofile present for ONU, ignoring onu discovery\", log.Fields{\"onuID\": onuDev.onuID})\n\t\t\t\t\t\ttpInstExists \u003d true\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tpInstExists, nil\n\t}",
      "parentUuid": "badd0602_d4752aa9",
      "revId": "8ba4aa607544febf159d28112077f8120a8963a0",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fd58b17_2f4736ad",
        "filename": "internal/pkg/core/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1818,
      "author": {
        "id": 1000960
      },
      "writtenOn": "2025-08-01T11:05:07Z",
      "side": 1,
      "message": "Modified the checkForResourceExistance function for better readability. Below is the behavior with the new flag introduced.\n\n1. If ForceOnuDiscIndProcessing is enabled, no check on resource existence will be done and discovery will be processed.\n2. Else, based on the CheckOnuDevExistenceAtOnuDiscovery flag, check will be made on either techprofile or device existence. Accordingly discovery will be ignored if the resource exists.",
      "parentUuid": "47b81b52_caa0d50a",
      "revId": "8ba4aa607544febf159d28112077f8120a8963a0",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    }
  ]
}